# Simple workflow for deploying static content to GitHub Pages
name: Build Angular and Deploy to GitHub Pages

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
  workflow_dispatch:


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: 18.x
  CLI_VERSION: 14.2.1

jobs:
  install:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm install

  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        Test: [Test,Lint]
    
    needs: install

    steps:
    - uses: actions/checkout@v3
    - name: Test (${{ matrix.Test }})
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - run: npm link @angular/cli@${{ env.CLI_VERSION }}
    - if: ${{ matrix.Test == 'Lint' }}
      run: npm run test:lint
    - if: ${{ matrix.Test == 'Test' }}
      run: npm run test:test

  build:
    runs-on: ubuntu-latest
    
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Cache build output
      uses: actions/cache@v2
      env:
        cache-name: cache-dist
      with:
        path: dist/
        key: ${{ runner.os }}-${{ github.run_id }}
    - run: npm link @angular/cli@${{ env.CLI_VERSION }}
    - run: npm run build:${GITHUB_REF##*/}
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
        
      - name: Use cached build output
        uses: actions/cache@v2
        env:
          cache-name: cache-dist
        with:
          path: dist/
          key: ${{ runner.os }}-${{ github.run_id }}
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: './dist/leaderboard-ui-tool/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use cached build output
        uses: actions/cache@v2
        env:
          cache-name: cache-dist
        with:
          path: dist/
          key: ${{ runner.os }}-${{ github.run_id }}
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'build.zip'
          directory: './dist/leaderboard-ui-tool/'
      - name: Upload Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "build.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
